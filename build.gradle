plugins {
    id 'groovy'
    id 'java'
    id 'java-library'
    id 'maven-publish'
    id 'signing'
}

group = 'io.elastic'
version = '3.4.1-SNAPSHOT'
sourceCompatibility = '1.8'

repositories {
    mavenCentral()
    maven {
        url 'https://oss.sonatype.org/content/repositories/snapshots'
    }
}

def isReleaseBuild() {
    return !version.endsWith('SNAPSHOT')
}


dependencies {
    testRuntimeOnly 'org.codehaus.groovy:groovy-all:3.0.13'
    testImplementation 'org.spockframework:spock-junit4:2.2-groovy-3.0'
    testImplementation 'org.spockframework:spock-core:2.2-groovy-3.0'
    testImplementation 'com.github.rest-driver:rest-client-driver:2.0.0'
    testImplementation 'org.eclipse.jetty:jetty-server:9.4.1.v20170120'
    testImplementation 'com.github.tomakehurst:wiremock-jre8-standalone:2.33.2'


    implementation 'org.glassfish:javax.json:1.0.4'
    implementation 'com.rabbitmq:amqp-client:5.9.0'
    implementation 'commons-codec:commons-codec:1.10'
    implementation 'commons-io:commons-io:2.7'
    implementation 'org.apache.httpcomponents:httpclient:4.5.13'
    implementation 'com.google.inject:guice:5.1.0'
    implementation 'com.google.inject.extensions:guice-assistedinject:5.1.0'
    implementation 'ch.qos.logback:logback-classic:1.2.10'
    implementation 'ch.qos.logback.contrib:logback-json-classic:0.1.5'
    implementation 'ch.qos.logback.contrib:logback-jackson:0.1.5'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.13.2.2'
}

jar {
    manifest {
        attributes('Implementation-Vendor' : 'elastic.io Gmbh',
                'Implementation-Title': 'elastic.io Sailor for JVM',
                'Implementation-Version': archiveVersion)
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}

wrapper {
    gradleVersion = '7.5.1'
}

def getReleaseRepositoryUrl() {
    return "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
}

def getSnapshotRepositoryUrl() {
    return "https://oss.sonatype.org/content/repositories/snapshots/"
}

def getRepositoryUsername() {
    return project.hasProperty('sonatypeUsername') ? sonatypeUsername : ""
}

def getRepositoryPassword() {
    return project.hasProperty('sonatypePassword') ? sonatypePassword : ""
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'sailor-jvm'
            from components.java
            pom {
                name = 'elasticio-sailor-jvm'
                packaging = 'jar'
                description = 'Sailor for JVM'
                url = 'http://www.elastic.io'
                inceptionYear = '2015'

                organization {
                    name = 'elastic.io GmbH'
                    url = 'http://www.elastic.io'
                }

                scm {
                    url = 'scm:git@github.com:elasticio/sailor-jvm.git'
                    connection = 'scm:git@github.com:elasticio/sailor-jvm.git'
                    developerConnection = 'scm:git@github.com:elasticio/sailor-jvm.git'
                }

                licenses {
                    license {
                        name = 'The Apache Software License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution = 'repo'
                    }
                }

                issueManagement {
                    system = 'GitHub'
                    url = 'https://github.com/elasticio/sailor-jvm/issues'
                }

                developers {
                    developer {
                        id = 'elasticio'
                        name = 'elastic.io GmbH'
                        email = 'support@elastic.io'
                    }
                }
            }
        }
    }

    repositories {
        maven {
            url = isReleaseBuild() ? getReleaseRepositoryUrl() : getSnapshotRepositoryUrl()

            credentials {
                username = getRepositoryUsername()
                password = getRepositoryPassword()
            }
        }
    }
}

signing {
    required { isReleaseBuild() && gradle.taskGraph.hasTask("publish") }
    sign publishing.publications.mavenJava
}