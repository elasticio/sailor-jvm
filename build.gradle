apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'groovy'
apply plugin: 'maven-publish'
apply plugin: 'signing'

apply plugin: org.owasp.dependencycheck.gradle.DependencyCheckPlugin

group = 'io.elastic'
version = '3.3.10-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    implementation "org.glassfish:javax.json:1.0.4"
    implementation "com.rabbitmq:amqp-client:5.9.0"
    implementation "commons-codec:commons-codec:1.10"
    implementation "commons-io:commons-io:2.7"
    implementation "org.apache.httpcomponents:httpclient:4.5.13"
    implementation "com.google.inject:guice:5.1.0"
    implementation "com.google.inject.extensions:guice-assistedinject:5.1.0"
    implementation "ch.qos.logback:logback-classic:1.2.10"
    implementation "ch.qos.logback.contrib:logback-json-classic:0.1.5"
    implementation "ch.qos.logback.contrib:logback-jackson:0.1.5"
    implementation "com.fasterxml.jackson.core:jackson-databind:2.13.2.2"

    testRuntimeOnly 'org.codehaus.groovy:groovy-all:2.4.15'
    testImplementation "org.spockframework:spock-core:1.3-groovy-2.4"
    testImplementation "com.github.rest-driver:rest-client-driver:2.0.0"
    testImplementation "org.eclipse.jetty:jetty-server:9.4.1.v20170120"
    testImplementation 'com.github.tomakehurst:wiremock-jre8-standalone:2.33.2'
}

def isReleaseBuild() {
    return !version.endsWith("SNAPSHOT")
}

def getReleaseRepositoryUrl() {
    return "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
}

def getSnapshotRepositoryUrl() {
    return "https://oss.sonatype.org/content/repositories/snapshots/"
}

def getRepositoryUsername() {
    return project.hasProperty('sonatypeUsername') ? sonatypeUsername : ""
}

def getRepositoryPassword() {
    return project.hasProperty('sonatypePassword') ? sonatypePassword : ""
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            pom {
                name = 'elasticio-sailor-jvm'
                packaging = 'jar'
                description = 'Sailor for JVM'
                url = 'http://www.elastic.io'
                inceptionYear = '2015'

                organization {
                    name = 'elastic.io GmbH'
                    url = 'http://www.elastic.io'
                }

                scm {
                    url = 'scm:git@github.com:elasticio/sailor-jvm.git'
                    connection = 'scm:git@github.com:elasticio/sailor-jvm.git'
                    developerConnection = 'scm:git@github.com:elasticio/sailor-jvm.git'
                }

                licenses {
                    license {
                        name = 'The Apache Software License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution = 'repo'
                    }
                }

                issueManagement {
                    system = 'GitHub'
                    url = 'https://github.com/elasticio/sailor-jvm/issues'
                }

                developers {
                    developer {
                        id = 'elasticio'
                        name = 'elastic.io GmbH'
                        email = 'support@elastic.io'
                    }
                }
            }
        }
    }

    repositories {
        maven {
            url = isReleaseBuild() ? getReleaseRepositoryUrl() : getSnapshotRepositoryUrl()

            credentials {
                username = getRepositoryUsername()
                password = getRepositoryPassword()
            }
        }
    }
}

signing {
    required { isReleaseBuild() && gradle.taskGraph.hasTask("publish") }
    sign publishing.publications.mavenJava
}

task sourceJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task javadocs(type: Javadoc) {
    source = sourceSets.main.allJava
    classpath = configurations.implementation
}

artifacts {
    archives sourceJar
    archives javadocJar
}

wrapper {
    gradleVersion = '7.5'
}

jar {
    manifest {
        attributes("Implementation-Vendor": "elastic.io Gmbh",
                "Implementation-Title": "elastic.io Sailor form JVM",
                "Implementation-Version": version)
    }
}

check.dependsOn dependencyCheckAnalyze

dependencyCheck {
    format = 'ALL'
    // Dependency Check script will fail in case there are critical (9.0-10.0) vulnerabilities.
    // It should be configured to 7 (high and critical), but so far is not possible as 'axis' library
    // and log4j issues which does not have any updates that solve the problem
    failBuildOnCVSS = 7
    suppressionFile = './dependencycheck-base-suppression.xml'
}

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.owasp:dependency-check-gradle:6.0.3'
    }
}
